{"version":3,"sources":["oblique-features.module.js","directives/oblique-features.directive.js","services/oblique-features.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"oblique-features.js","sourcesContent":["(function() {\n  'use strict';\n  /**\n   * @ngdoc overview\n   * @name oblique-features\n   * @description\n   * The `oblique-features` angular module is the main module for loading the\n   * feature enable/disable/hide functionality of oblique-features.\n   */\n  angular.module('oblique-features', []);\n})();\n","(function() {\n  'use strict';\n  angular.module('oblique-features')\n  .directive('ofFeature', [/*'featuresService',*/ function(/*featuresService*/) {\n    return {\n      restrict: 'EA',\n      transclude: true,\n      scope: {\n        feature: '@'\n      },\n      controller: ['$scope', 'featuresService', function($scope, featuresService) {\n        $scope.checkFeatureEnabled = function(featureName) {\n          return featuresService.checkFeatureEnabled(featureName);\n        };\n        $scope.toggleFeatureEnabled = function(featureName) {\n          return featuresService.toggleFeatureEnabled(featureName);\n        };\n      }],\n      template: '<span ng-if=\"checkFeatureEnabled(feature)\" ng-transclude></span>'\n    };\n  }]);\n})();\n","(function() {\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name featuresService\n   * @description\n   * The featuresService is the main point of interaction between the `oblique-features` module and AngularJS\n   * code. This service proivdes the following interaction capabilities:\n   *\n   * 1. Checking feature enabled / disabled status; and\n   * 2. Toggling individual features; and\n   * 3. Setting data dictionaries of enabled / disabled features from:\n   *   1. Hard-coded JSON sources; or\n   *   2. Remote JSON sources a single time or on a repeating schedule.\n   *\n   * ## Checking Feature Status\n   *\n   * In order to determine if a feature should be enabled or disabled, the service provides the\n   * `checkFeatureEnabled(featureName)`.  This function will return true if the feature is either explicitly\n   * enabled or is omitted from the data set or false if the feature is explicitly disabled.\n   *\n   * ### Base Required For All Other Features?\n   *\n   * If desired, it is possible for the enabled / disabled status of individual features to be influenced by whether\n   * or not the base feature is enabled.  If, for example, a security flaw is found, it would be possible to disable\n   * every feature by simply setting `base` to be false, and calling\n   * `featuresService.setBaseRequiredForAllFeatures(true)`.\n   *\n   * At this point, if `base` ever becomes disabled, any element with an `of-feature` element will be disabled.\n   *\n   * ## Disabling Features\n   * For ease of use and mitigation of unintended consequences, all features are enabled by default.  In order\n   * to prevent a feature from being displayed, the feature must be disabled.  There are multiple ways of disabling\n   * features in `oblique-features`:\n   *\n   * 1. Toggling the individual feature; or\n   * 2. Setting a feature dictionary with the feature disabled; or\n   * 3. Setting a remote JSON file with the desired features disabled in it.\n   *\n   * ### Toggling Individual Features\n   * This is more useful for testing applications, to ensure that when a feature is disabled, all of the\n   * relevant items are hidden and that it does not have any adverse effect on the remainder of the web application.\n   *\n   * To toggle an individual feature, one could set up the AngularJS JavaScript as follows:\n    <example>\n    angular.module('some-module').controller('someController', ['featuresService', function(featuresService) {\n      this.toggleFeature = function(featureName) {\n        featuresService.toggleFeature(featureName);\n      }\n    }]);\n    </example>\n   * And then have an HTML setup as follows:\n    ```html\n    <div class=\"someFeatureDiv\" of-feature feature=\"disableMe\">\n      <!-- Some content goes here -->\n    </div>\n    <button ng-click=\"ctrl.toggleFeature('disableMe')\">Disable Feature</button>\n    ```\n   * ### Disabling Features Via Hard-Coded JSON Data\n   * This functionality is most useful if it is unlikely that deployed functionality will need to be adjusted on the\n   * fly.  In this method of feature disabling, the hard-coded JSON source is passed into the service and will\n   * over-write any other feature enabled / disabled status which had been previously set.  As an example:\n   *\n   <example>\n    angular.module('some-module').controller('someController', ['featuresService', function(featuresService) {\n      var jsonData = {\n        base: true,\n        signup: false,\n        accountDeletion: false,\n        dataViewing: true\n      };\n      featuresService.setHardCodedSource(jsonData);\n    }]);\n   </example>\n   *\n   * In this example, signup and accountDeletion functionality would be disabled while all other functionality would\n   * be enabled.\n   *\n   * ### Disabling Features Via Remote JSON Data\n   * This functionality is most useful if there is a high probability that functionality will need to be enabled /\n   * disabled on the fly without a full re-deploy of the web application.  In this case, the functionality dictionary\n   * needs to be deployed to a known URI which can be passed in to the setRemoteSource method.\n   *\n   * With the remote source, it is also possible to set a timeout to retrieve the remote source again to facilitate\n   * hot-disabling of functionality within a certain timeframe.  Taking the JSON data from the above example, if it were\n   * to be placed at http://foofoo.net/features.json, could be retrieved every 5 minutes by doing the following:\n   *\n   <example>\n    angular.module('some-module').controller('someController', ['featuresService', function(featuresService) {\n      featuresService.setRemoteSource('http://foofoo.net/features.json', 5*60*1000);\n    }]);\n   </example>\n   *\n   *\n   */\n  angular.module('oblique-features')\n  .factory('featuresService',\n    ['$log', '$http', '$interval', '$rootScope',\n    function($log, $http, $interval, $rootScope) {\n      var FeaturesService = {\n        remoteSource: null,\n        intervalId: null,\n        baseRequiredForAllFeatures: false,\n        featuresEnabledStatus: {\n          base: true\n        }\n      };\n      FeaturesService.checkFeatureEnabled = function(featureName) {\n        featureName = featureName ? featureName : 'base';\n        if (FeaturesService.baseRequiredForAllFeatures) {\n          return (FeaturesService.featuresEnabledStatus.base &&\n            (FeaturesService.featuresEnabledStatus[featureName] === true ||\n              FeaturesService.featuresEnabledStatus[featureName] === undefined));\n        } else {\n          return (FeaturesService.featuresEnabledStatus[featureName] ||\n            FeaturesService.featuresEnabledStatus[featureName] === undefined);\n        }\n      };\n\n      FeaturesService.toggleFeature = function(featureName) {\n        if (!featureName) {\n          featureName = 'base';\n        }\n        if (undefined === FeaturesService.featuresEnabledStatus[featureName]) {\n          FeaturesService.featuresEnabledStatus[featureName] = false;\n        } else {\n          FeaturesService.featuresEnabledStatus[featureName] = !FeaturesService.featuresEnabledStatus[featureName];\n        }\n      };\n\n      FeaturesService.setFeatureEnabledData = function(data) {\n        if (undefined === data.base) {\n          data.base = true;\n        }\n        FeaturesService.featuresEnabledStatus = data;\n      };\n\n      FeaturesService.setBaseRequiredForAllFeatures = function(reqdForAll) {\n        FeaturesService.baseRequiredForAllFeatures = reqdForAll;\n      };\n\n      FeaturesService.setRemoteSource = function(sourceURI, repeatIn, repeatCount) {\n        FeaturesService.remoteSource = sourceURI;\n        FeaturesService.checkRemoteSource();\n        if (FeaturesService.intervalId) {\n          $interval.cancel(FeaturesService.intervalId);\n        }\n        if (repeatIn) {\n          FeaturesService.intervalId = $interval(FeaturesService.checkRemoteSource, repeatIn, repeatCount);\n          if (repeatIn < 60000) {\n            $log.warn('setRemoteSource: Checking source at extremely short intervals is not advised.');\n          }\n        }\n      };\n\n      FeaturesService.checkRemoteSource = function() {\n        if (!FeaturesService.remoteSource) {\n          $log.warn('checkRemoteSource: No remote source has been set, returning');\n          return;\n        }\n        var promise = $http.get(FeaturesService.remoteSource);\n        var self = FeaturesService;\n        promise.then(function(response) {\n          self.setFeatureEnabledData(response.data);\n          return response.data;\n        })\n        .catch(function(errorResponse) {\n          var errorData = {\n            status: errorResponse.status,\n            method: errorResponse.config.method,\n            url: errorResponse.config.url,\n            statusText: errorResponse.statusText,\n            data: errorResponse.data\n          };\n          $log.error('checkRemoteSource: Errors encountered retrieving feature status information: ', errorData);\n        });\n        return promise;\n      };\n\n      FeaturesService.setHardCodedSource = function(data) {\n        FeaturesService.setFeatureEnabledData(data);\n        if (FeaturesService.intervalId) {\n          $interval.cancel(FeaturesService.intervalId);\n          FeaturesService.intervalId = null;\n        }\n      };\n      return FeaturesService;\n    }]);\n})();\n"],"sourceRoot":"/source/"}